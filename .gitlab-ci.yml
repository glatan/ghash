stages:
  - stable
  - msrv # Minimum Supported Rust Version
  - nightly

variables:
  CARGO_HOME: ${CI_PROJECT_DIR}/cargo
  MSRV: '1.50'
  STABLE_RUST_VERSION: '1.53'
  WASMTIME_VERSION: '0.26.0'

.changes_rule: &changes_rule
  changes:
    - .gitlab-ci.yml
    - .cargo/config.toml
    - Cargo.toml
    - components/**/*.rs
    - src/lib.rs

# FORCE_RUNをtrueにして手動で実行すればNightlyのテストも動く
.nightly_rules: &nightly_rules
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule" && $MSRV != $STABLE_RUST_VERSION'
      when: always
      allow_failure: true
    - if: '$RUN_NIGHTLY_TESTS == "true" && $MSRV != $STABLE_RUST_VERSION'
      when: always
      allow_failure: true
    - when: never

# Linux

.linux_cross_compile_template: &linux_cross_compile_template
  image: ubuntu:hirsute
  cache:
    key: ${CI_JOB_STAGE}-${TARGET}
    paths:
      - target/${TARGET}
  before_script:
    - set -ex
    - apt update -y
    - apt install -y curl make 
    - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > install.sh
    - sh install.sh -y --default-toolchain ${CHANNEL} --profile minimal -t ${TARGET}
    - >
      if [[ ${#PACKAGES[@]} -ne 0 ]]; then
        apt install -y qemu-user ${PACKAGES};
      fi
    - export PATH="${PATH}:${CARGO_HOME}/bin"
  script:
    - make test.${TARGET}

.linux-matrix_template: &linux_matrix_template
  parallel:
    matrix:
      - PACKAGES: gcc-aarch64-linux-gnu
        TARGET: aarch64-unknown-linux-gnu
      - PACKAGES: gcc-aarch64-linux-gnu
        TARGET: aarch64-unknown-linux-musl
      - PACKAGES: gcc-arm-linux-gnueabi
        TARGET: arm-unknown-linux-gnueabi
      - PACKAGES: gcc-arm-linux-gnueabihf
        TARGET: arm-unknown-linux-gnueabihf
      - PACKAGES: gcc-arm-linux-gnueabi
        TARGET: arm-unknown-linux-musleabi
      - PACKAGES: gcc-arm-linux-gnueabihf
        TARGET: arm-unknown-linux-musleabihf
      - PACKAGES: gcc-arm-linux-gnueabi
        TARGET: armv5te-unknown-linux-gnueabi
      - PACKAGES: gcc-arm-linux-gnueabi
        TARGET: armv5te-unknown-linux-musleabi
      - PACKAGES: gcc-arm-linux-gnueabi
        TARGET: armv7-unknown-linux-gnueabi
      - PACKAGES: gcc-arm-linux-gnueabihf
        TARGET: armv7-unknown-linux-gnueabihf
      - PACKAGES: gcc-arm-linux-gnueabi
        TARGET: armv7-unknown-linux-musleabi
      - PACKAGES: gcc-arm-linux-gnueabihf
        TARGET: armv7-unknown-linux-musleabihf
      - PACKAGES: gcc-i686-linux-gnu
        TARGET: i586-unknown-linux-gnu
      - PACKAGES: gcc-i686-linux-gnu
        TARGET: i586-unknown-linux-musl
      - PACKAGES: gcc-i686-linux-gnu
        TARGET: i686-unknown-linux-gnu
      - PACKAGES: gcc-i686-linux-gnu
        TARGET: i686-unknown-linux-musl
      - PACKAGES: gcc-mips-linux-gnu
        TARGET: mips-unknown-linux-gnu
      - PACKAGES: gcc-mips-linux-gnu
        TARGET: mips-unknown-linux-musl
      - PACKAGES: gcc-mips64-linux-gnuabi64
        TARGET: mips64-unknown-linux-gnuabi64
      - PACKAGES: gcc-mips64-linux-gnuabi64
        TARGET: mips64-unknown-linux-muslabi64
      - PACKAGES: gcc-mips64el-linux-gnuabi64
        TARGET: mips64el-unknown-linux-gnuabi64
      - PACKAGES: gcc-mips64el-linux-gnuabi64
        TARGET: mips64el-unknown-linux-muslabi64
      - PACKAGES: gcc-mipsel-linux-gnu
        TARGET: mipsel-unknown-linux-gnu
      - PACKAGES: gcc-mipsel-linux-gnu
        TARGET: mipsel-unknown-linux-musl
      - PACKAGES: gcc-powerpc-linux-gnu
        TARGET: powerpc-unknown-linux-gnu
      - PACKAGES: gcc-powerpc64-linux-gnu
        TARGET: powerpc64-unknown-linux-gnu
      - PACKAGES: gcc-powerpc64le-linux-gnu
        TARGET: powerpc64le-unknown-linux-gnu
      - PACKAGES: gcc-riscv64-linux-gnu
        TARGET: riscv64gc-unknown-linux-gnu
      - PACKAGES: gcc-s390x-linux-gnu
        TARGET: s390x-unknown-linux-gnu
      - PACKAGES: gcc-sparc64-linux-gnu
        TARGET: sparc64-unknown-linux-gnu
      - PACKAGES: gcc-arm-linux-gnueabihf
        TARGET: thumbv7neon-unknown-linux-gnueabihf
      - PACKAGES: gcc
        TARGET: x86_64-unknown-linux-gnu
      - PACKAGES: gcc
        TARGET: x86_64-unknown-linux-musl

stable-linux:
  stage: stable
  rules:
    - <<: *changes_rule
  variables:
    CHANNEL: ${STABLE_RUST_VERSION}
  <<: *linux_cross_compile_template
  <<: *linux_matrix_template

msrv-linux:
  stage: msrv
  rules:
    - <<: *changes_rule
  variables:
    CHANNEL: ${MSRV}
  <<: *linux_cross_compile_template
  <<: *linux_matrix_template

nightly-linux:
  stage: nightly
  <<: *nightly_rules
  variables:
    CHANNEL: nightly
  <<: *linux_cross_compile_template
  <<: *linux_matrix_template

tier3-linux:
  stage: nightly
  image: ubuntu:hirsute
  <<: *nightly_rules
  cache:
    key: ${CI_JOB_STAGE}-${TARGET}
    paths:
      - target/${TARGET}
  before_script:
    - apt update -y
    - apt install -y curl gcc make
    - curl https://sh.rustup.rs -sSf > install.sh
    - sh install.sh -y --default-toolchain nightly --profile minimal -t ${TARGET}
    - >
      if [[ ${#PACKAGES[@]} -ne 0 ]]; then
        apt install -y qemu-user ${PACKAGES};
      fi
    - export PATH="${PATH}:${CARGO_HOME}/bin"
    - rustup component add rust-src
  script:
    - make test_build_std.${TARGET}
  parallel:
    matrix:
      - PACKAGES: gcc-arm-linux-gnueabi
        TARGET: armv4t-unknown-linux-gnueabi
      - PACKAGES: gcc-mipsisa32r6-linux-gnu
        TARGET: mipsisa32r6-unknown-linux-gnu
      - PACKAGES: gcc-mipsisa32r6el-linux-gnu
        TARGET: mipsisa32r6el-unknown-linux-gnu
      - PACKAGES: gcc-mipsisa64r6-linux-gnuabi64
        TARGET: mipsisa64r6-unknown-linux-gnuabi64
      - PACKAGES: gcc-mipsisa64r6el-linux-gnuabi64
        TARGET: mipsisa64r6el-unknown-linux-gnuabi64

# WebAssembly

.wasm32-wasi_template: &wasm32-wasi_template
  image: ubuntu:hirsute
  cache:
    key: ${CI_JOB_STAGE}-wasm32-wasi
    paths:
      - target/wasm32-wasi
  before_script:
    - apt update -y
    - apt install -y curl gcc make xz-utils
    - curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs > install.sh
    - sh install.sh -y --default-toolchain ${CHANNEL} --profile minimal -t wasm32-wasi
    - curl -L "https://github.com/bytecodealliance/wasmtime/releases/download/v${WASMTIME_VERSION}/wasmtime-v${WASMTIME_VERSION}-x86_64-linux.tar.xz" > wasmtime-v${WASMTIME_VERSION}-x86_64-linux.tar.xz
    - tar -xvf wasmtime-v${WASMTIME_VERSION}-x86_64-linux.tar.xz
    - mv wasmtime-v${WASMTIME_VERSION}-x86_64-linux/wasmtime /usr/bin/
    - export PATH="${PATH}:${CARGO_HOME}/bin"
  script:
    - make test.wasm32-wasi

stable-wasm32-wasi:
  stage: stable
  rules:
    - <<: *changes_rule
  variables:
    CHANNEL: ${STABLE_RUST_VERSION}
  <<: *wasm32-wasi_template

msrv-wasm32-wasi:
  stage: msrv
  rules:
    - <<: *changes_rule
  variables:
    CHANNEL: ${MSRV}
  <<: *wasm32-wasi_template

nightly-wasm32-wasi:
  stage: nightly
  <<: *nightly_rules
  variables:
    CHANNEL: nightly
  <<: *wasm32-wasi_template

# Windows

.windows_msvc_template: &windows_msvc_template
  tags:
    - shared-windows
    - windows
  cache:
    key: ${CI_JOB_STAGE}-${TARGET}
    paths:
      - target/${TARGET}
  before_script:
    - Remove-Item Alias:curl
    - choco install make -y
    - curl --proto '=https' --tlsv1.2 -sSf https://win.rustup.rs/x86_64 -o rustup-init.exe
    - ./rustup-init.exe -y --default-toolchain ${CHANNEL} --profile minimal -t ${TARGET} 
    - $ENV:Path += "${CI_PROJECT_DIR}/cargo/bin"
  script:
    - make test.${TARGET}

.windows_matrix_template: &windows_matrix_template
  parallel:
    matrix:
      - TARGET: x86_64-pc-windows-msvc
      - TARGET: i686-pc-windows-msvc
      - TARGET: i586-pc-windows-msvc

stable-windows-msvc:
  stage: stable
  rules:
    - <<: *changes_rule
  variables:
    CHANNEL: ${STABLE_RUST_VERSION}
  <<: *windows_msvc_template
  <<: *windows_matrix_template

msrv-windows-msvc:
  stage: msrv
  rules:
    - <<: *changes_rule
  variables:
    CHANNEL: ${MSRV}
  <<: *windows_msvc_template
  <<: *windows_matrix_template

nightly-windows-msvc:
  stage: nightly
  <<: *nightly_rules
  variables:
    CHANNEL: nightly
  <<: *windows_msvc_template
  <<: *windows_matrix_template
